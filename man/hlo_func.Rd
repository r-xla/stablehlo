% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/func.R
\name{hlo_func}
\alias{hlo_func}
\alias{local_func}
\title{Create a function}
\usage{
hlo_func(id = "main")

local_func(id = "main")
}
\arguments{
\item{id}{(\code{character(1)}\cr
The id of the function.}
}
\value{
A \code{\link{Func}} object.
}
\description{
Both functions create a new \code{\link{Func}} with the given id which is afterwards affessible via \code{\link[=.current_func]{.current_func()}}.
Functions receiving a \code{\link{Func}} as an argument (such as \code{\link{hlo_input}}, \code{\link{hlo_add}}, ...) usually use
\code{\link[=.current_func]{.current_func()}} by default.

Differences between the two functions:
\itemize{
\item \code{\link{local_func}} removes the function when exiting the current scope, whereas \code{\link{hlo_func}} does not.
\item \code{\link{hlo_func}} discards the previously built function(s), whereas \code{\link{local_func}} does not:
after a function created by \code{\link{local_func}} is either cleaned up automatically (by exiting the scope) or the function
is finalized via \code{\link{hlo_return}}, the previously built function is restored, i.e., accessible via \code{\link[=.current_func]{.current_func()}}.
To build nested functions (e.g. to create a closure that is passed to another op), use
\code{\link{local_func}} instead of \code{\link{hlo_func}}.
}
}
