% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/op-rng_bit_generator.R
\name{hlo_rng_bit_generator}
\alias{hlo_rng_bit_generator}
\title{Create RNG Bit Generator Operation}
\usage{
hlo_rng_bit_generator(rng_algorithm = "DEFAULT", initial_state)
}
\arguments{
\item{rng_algorithm}{(\code{character(1)})\cr
One of: "DEFAULT", "THREE_FRY", or "PHILOX".
\itemize{
\item DEFAULT: Implementation-defined algorithm.
\item THREE_FRY: Implementation-defined variant of the Threefry algorithm.
\item PHILOX: Implementation-defined variant of the Philox algorithm.
}}

\item{initial_state}{(\code{\link{FuncVariable}})\cr
A 1-dimensional tensor of type ui64 containing the initial state.
Size constraints:
\itemize{
\item DEFAULT: implementation-defined size
\item THREE_FRY: size must be 2
\item PHILOX: size must be 2 or 3
}}
}
\value{
(\code{list()} of \code{\link{FuncVariable}})\cr
A list containing two elements:
\itemize{
\item output_state: Updated state tensor of the same type as initial_state
\item output: Tensor of integer or floating-point type filled with random bits
}
}
\description{
Returns an output filled with uniform random bits and an updated output state
using the pseudorandom number generator algorithm given an initial state.

The output is guaranteed to be a deterministic function of \code{initial_state},
but it is not guaranteed to be deterministic between implementations.
}
\examples{
func <- local_func()
initial_state <- hlo_tensor(c(1L, 2L), dtype = "ui64", shape = 2L)
result <- hlo_rng_bit_generator("THREE_FRY", initial_state)
output_state <- result[[1]]
output <- result[[2]]
}
