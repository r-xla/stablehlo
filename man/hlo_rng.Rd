% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/op-rng.R
\name{hlo_rng}
\alias{hlo_rng}
\title{Create RNG Operation}
\usage{
hlo_rng(a, b, shape, rng_distribution = "UNIFORM")
}
\arguments{
\item{a}{(\code{\link{FuncVariable}})\cr
A scalar tensor of integer, boolean, or floating-point type.
For UNIFORM: lower bound of the interval.
For NORMAL: mean of the distribution.}

\item{b}{(\code{\link{FuncVariable}})\cr
A scalar tensor of integer, boolean, or floating-point type.
For UNIFORM: upper bound of the interval.
For NORMAL: standard deviation of the distribution.}

\item{shape}{(\code{\link{FuncVariable}})\cr
A 1-dimensional tensor constant of type si64 specifying the shape of the output.}

\item{rng_distribution}{(\code{character(1)})\cr
One of: "UNIFORM" or "NORMAL".}
}
\value{
(\code{\link{FuncVariable}})\cr
A tensor of the same element type as \code{a} and \code{b} with the specified shape.
}
\description{
Generates random numbers using the specified distribution algorithm.

If \code{rng_distribution = "UNIFORM"}, then the random numbers are generated
following the uniform distribution over the interval \verb{[a, b)}. If \code{a >= b},
the behavior is undefined.

If \code{rng_distribution = "NORMAL"}, then the random numbers are generated
following the normal distribution with mean = \code{a} and standard deviation = \code{b}.
If \code{b < 0}, the behavior is undefined.
}
\examples{
func <- local_func()
a <- hlo_scalar(0.0, dtype = "f32")
b <- hlo_scalar(1.0, dtype = "f32") 
shape <- hlo_tensor(c(3L, 3L), dtype = "i64", shape = 2L)
result <- hlo_rng(a, b, shape, "UNIFORM")
}
